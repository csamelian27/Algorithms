* What is a linked list?
 - A data structure that contains a head, tail and length property.
 - They consist of nodes, and each node has a values and a pointer to another node or null
 - Each node is unidirectionally connected to the next node - only flows in one direction (doubly linked list works in both directions)
 - Insert at the beginning - insert at head and point to old head

* Comparison with Arrays:
 - Lists:
    - Do not have indexes!
    - Connected via nodes with a next pointer
    - Random access is not allowed - unidirectional (traverse from beginning all the way to the random element)
 - Arrays:
    - Indexed in order!
    - Insertion and deletion can be expensive - at front of array - must be reindexed, not at back
    - Can quickly be accessed at a specific, random index

A linked list is a collection of nodes - a node stores a piece of data and a reference to the next node

* Big O Notation:
 - Lists: Excel at insertion and deletion at the beginning, not at random access
    - Insertion O(1)
    - Remove - It depends... O(1) or O(n)
    - Searching O(n)
    - Access O(n)
 - Arrays: Better for random Access
    - Access O(1)
    - Insertion & removal at end of array O(1)
    - Beginning O(n)

* Push pseudocode:
 - This function should accept a value
 - Create a new node using the value passed to the function
 - If there is no head property on the list, set the head and tail to be the newly created node
 - Otherwise set the next property on the tail to be the new node and set the tail property on the list to be the newly created node
 - Increment the length by one
 - Return the list;

* Pop pseucode:
 - If there are no nodes in the list, return undefined
 - Loop through the list until you reach the tail
 - Set the next property of the 2nd to last node to be null
 - Set the tail to be the 2nd to last node
 - Decrement the length of the list by 1
 - Return the value of the node removed

 - Removes a node from the beginnign of the linked list
* Shift pseudocode:
 - If there are no nodes, return undefined
 - Store the current head property in a variable
 - Set the head property to be the current head's next property
 - Decrement the length by 1
 - Return the value of the node removed

- Adds a val to the beginning of the list
* Unshift pseudocode:
 - This function should accept a value
 - Create a new node using the value passed to the function
 - If there is no head property on the list, set the head and tail to be the newly created node
 - Otherwise, set the newly created node's next property to be the current head property on the list
 - Set the head property on the list to be that newly created node
 - Increment the list length by 1
 - Return the linked list

- Takes a number/index/position and returns the item at that position
* Get pseudocode:
 - This function should accept an index
 - If the index is less than zero or greater than or equal to the length of the list, return null
 - Loop through the list until you reach the index and return the node at that specific index

* Set pseudocode:
 - This function should accept a value and an index
 - Use your get function to find the specific node
 - If the node is not found, return false
 - If the node is found, set the value of that node to be the value passed to the function and return true

- Adding a node to the Linked List at a specific position
* Insert pseudocode:
 - If index is less than zero or greater than the length, return false
 - If the index is the same as the length, use push method to push a new node to the end of the list
 - If the index is 0, unshift a new node to the start of the list
 - Otherwise, using the get method, access the node at the index - 1 (the node before where we're inserting)
 - Set the next property on that node to be the new node
 - Set the next property on the new node to be the previous next
 - Increment the legnth
 - Return true

- Removing a node from the Linked List at a specific position
* Remove pseudocode:
 - If the index is less than zero or grater than the length, return undefined
 - If the index is the same as the length - 1, pop
 - If the index is 0, shift
 - Otherwise, use the get method, access the node at the index - 1
 - Set the next property on that node to be the next of the next node
 - Decrement the length
 - Return the value of the removed node

* Reverse pseudocode:
 - Swap the head and tail
 - Create a var called next
 - Create a var called prev
 - Create a var called node and initialize it to start at the head
 - Loop through the list
 - Set next to be the next property on whatever node is
 - Set the next property on the node to be whatever prev is
 - Set prev to be the value of the node variable
 - Set the node variable to be that value of the next variable
