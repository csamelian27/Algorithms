* What is sorting?
 - The process of rearranging items in a collection (e.g. an array) so that the items are in some kind of order.
    - Numbers from smallest to largest, or vice versa
    - Sorting names alphabetically
    - Sorting movies based on release year or revenue or both

* Why do we need to learn this?
 - Sorting is an incredibly common task, so it's good to know how it works
 - There are different ways to sort things, and different techniques have their own advantages and disadvantages

* 3 easier sorts we'll learn:
 - Bubble
 - Selection
 - Insertion: slow when data is random, very fast when data is nearly sorted

* JS built in sort:
 - Without params, it sorts alphabetically well, but it sorts numbers wrong because it's based on the alphatical order of the numbers' unicode values
 - With params, it accepts an optional comparator function
    - You can use this comparator function to tell JS how you want it to sort
    - The comparator looks at pairs of elements (a and b), determines their sort order based on the return value
        - If it returns a negative number, a should come before b ((a, b) => a - b)
        - If it returns a positive number, a should come after b ((a, b) => b - a)
        - If it returns 0, a and b are the same as far as the sort is concerned

* Bubble sort: (Visualgo.net) = O(n^2)
 - A sorting algo where the largest values bubble up to the top
 - Each two values are compared through once and swapped in a is larger than b, if not just move forward. Then repeat.
 - **Swapping** - many sorting algos involve some swapping functionality
 - Pseudocode:
    - Start looping with a var called i at the end of the array towards the beginning
    - Then start an inner loop with a var called j from the beginning until i -1
    - If arr[j] > arr[j+1], swap those two values!
    - Return the sorted array

// ES5
function swap(arr, idx1, idx2) {
    var temp = arr[idx1];
    arr[idx1] = arr[idx2];
    arr[idx2] = temp;
}

// ES2015
const swap = (arr, idx1, idx2) => {
    [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];
}

* Selection Sort: O(n^2)
 - Similar to bubble sort, but instead of first placing large values into sorted position, it places small values into sorted position
 - Find the minimum value after going through entire array, then swap, and repeat.
 - Pseudocode:
    - Store the first element as the smallest value you've seen so far.
    - Compare this item to the next item in the array until you find a smaller number.
    - If a smaller number is found, designate that smaller number to be the new min (store the index of that number, not the value) and continue until the end of the array.
    - If the min is not the value (index) you initially began with, swap the two values.
    - Repeat this with the next element until the array is sorted.
    - Return the sorted array

* Insertion Sort:
 - Similar to both above, however there are key distinctions that make insertion better than other two
 - Builds up the sort by gradually creating a larger left half which is always sorted, inserting one element at a time to the correct place
 - Pseudocode:
    - Start by picking the second element in the array
    - Now compare the second element with the one before it and swap if necessary
    - Continue to the next element and if it is in the incorrect order, iterate through the sorted portion (i.e. the left side) to place the element in the correct place
    - Repeat until the array is sorted & return it

* Comparison between the 3:
 - Worst case, they are all equal O(n^2) time. For best case, bubble & insertion can be O(n), but selection is still O(n^2).
 - Space complexity is the same for all.
    - Bubble Sort: Best time - O(n), Avg/worst time = O(n^2), Space - O(1) (works well with nearly sorted data)
    - Insertion Sort: Best time - O(n), Avg/worst time = O(n^2), Space - O(1) (works well with nearly sorted data & live streamed data/continuously sorting/not all data ready at the start - only performs a single pass to find where one value should go)
    - Selection Sort: Best time - O(n^2), Avg/worst time = O(n^2), Space - O(1) (does not work well with nearly sorted data, just easy to understand)
