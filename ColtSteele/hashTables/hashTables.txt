HASH TABLES

------- ALGO EXPERT ---------

General Info
- extremely common & pretty simple
- same as:
    JS - Obj & Map
    Python - Dict
    Ruby - Hashes
    Java, Go & Scala - Maps

What is a Hash Table?
- data structure that stores pairs of key / values
- can access a value, given a key
- Insertion, Deletion & Searching are O(1) time on average - worst case is one giant linked list that is O(n) time
- (Supports O(1) for insertion, deletiong and searching)
- sounds like an array? where keys can be other data types besides indexes
- Hash Tables are built on top of arrays - under the hood, we've got an array storing values
- Use hash function to transform key into an index, which fits into underlying array to find valuesArr
- Hashing functions - turns string to integer - map every char in string to its ascii char & sum them
- Then run modulo operator (%) of length of underlying array
- To account for collision, (abr === bar after hashing above), you make an array of linked lists that have pointers
- To minimize collisions, use very fancy and powerful hashing functions that make it more consistently O(1)
- Resizing - underlying array doesn't have enough space - implement hash table that resizes itself
    - array.length = 10, create copy and double in size and take keys that've been hashed and pass them all through a new hashing function (with new length of new array)
    - can also make itself smaller
    - occurs infrequently, on average it retains O(1) time insertion & deletion
- keys can be anything that can be passed to the hashing function

ex:
    "foo" => 1
    "bar" => 2
    "baz" => 3

foo = 301 (ascii sum (not really but imagine))
301 % 3 (length of array) = 301 / 3 = 1 (returns remainder)
returns 1 = index 1 in the array

bar = 602
602 % 3 = 2
index 2 in array

baz = 90
90 % 3 = 0
index 0 in arrays

array = [3, 1, 2]
       baz foo bar


------- COLT STEELE ON UDEMY -------

- Hash tables are used to store non ordered key/value pairs
- Convert keys to valid array indices - hash function
- Hash function must operate consistently
    - Fixed size
    - One way operating
- Good hash function:
    - Fast (i.e. constant time)
    - Doesn't cluster outputs at specific indices, but distributes uniformly
    - Deterministic (reliable) - same input yields same output

*charCodeAt - 96 = alphabetic position*

basic example - only accounts for string keys, not O(1), could be more random to avoid clustering
const basicHash = (str, arrLength) => {
    let total = 0;
    for (let char of key) {
        let value = char.charCodeAt(0) - 96;
        total = (total + value) % arrLength;
    }
    return total;
};

basicHash("pink", 9);

slight improvement - sets a maximum for the loop & pass in a prime for arrLength to spread data
const betterHash = (str, arrLength) => {
    let total = 0;
    let WEIRD_PRIME = 31;

    for (let i = 0; i < Math.min(str.length, 100); i ++) {
        let char = key[i];
        let value = char.charCodeAt(0) - 96;
        total = (total * WEIRD_PRIME + value) % arrLength;
    }
    return total;
}

prime # for arrLength
betterHash("hello", 13);

- Prime numbers in the hash are helpful for spreading out the keys more uniformly.
- Reduces number of collisions by a large degree.

Dealing with Collisions
- Separate chaining - will do
    - Store values using a more sophisticated data structure (i.e. linked list)
    - Store many key/values at an index
- Linear probing - won't do
    - When we find a collision, we search through the array for the next empty slot
    - Store a single key/value at each index in the array
