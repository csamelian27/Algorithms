- Prioritize visiting all nodes on same level before moving down (BFS) or working more vertical (DFS)

* Breadth First Search - starting at beginning and working across the tree
 - Visit every sibling node before we look at a child node
 - Working horizontally
 - Steps iteratively:
    - Create a queue (FIFO - this can be an array) and a variable to store the values of nodes visited
    - Place the root node in the queue
    - Loop as long as there is anything in the queue
        - Dequeue a node from the queue (shifting from beginning of array) and push the value of the node into the variable that stores the nodes
        - If there is a left property on the node dequeued - add it to the queue
        - If there is a right property on the node dequeued - add it to the queue
    - Return the variable that stores the values

* Depth First Search - traverse nodes vertically down to end of tree before visiting sibling nodes
 - 3 main steps for any node (on a Binary Search Tree):
    - Visit the node itself and add to list
    - Traverse entire left side
    - Traverse entire right side

* 3 Types:
    - PreOrder - starting at top and go down
    - PostOrder - bottom up
    - InOrder - starting at bottom and working up and across

* DFS - PreOrder - visit node first, then traverse entire left side, then entire right side
 - Steps - Recursively (can do iteratively but shorter and easier to do recursively)
    - Create a var to store the values of nodes visited
    - Store the root of the BST in a var called current
    - Write a helper function which accepts a node
        1. Push the value of the node to the variable that stores the values
        2. If the node has a left property, call the helper function with the left property on the node
        3. If the node has a right property, call the helper function with the right property on the node
    - Invoke the helper function with the current variable
    - Return the array of values

* DFS - PostOrder - visit node AFTER we have traversed the left and right side, while there are lefts and rights we traverse then we visit the node - root is last visited node - explore all children before the root
 - Steps - Recursively (can do iteratively but shorter and easier to do recursively)
    - Create a var to store the values of nodes visited
    - Store the root of the BST in a var called current
    - Write a helper function which accepts a node
        2. If the node has a left property, call the helper function with the left property on the node
        3. If the node has a right property, call the helper function with the right property on the node
        1. Push the value of the node to the variable that stores the values
    - Invoke the helper function with the current variable
    - Return the array of values

* DFS - InOrder - 
 - Steps - Recursively (can do iteratively but shorter and easier to do recursively)
    - Create a var to store the values of nodes visited
    - Store the root of the BST in a var called current
    - Write a helper function which accepts a node
        - If the node has a left property, call the helper function with the left property on the node
        - If the node has a right property, call the helper function with the right property on the node
        - Push the value of the node to the variable that stores the values
    - Invoke the helper function with the current variable
    - Return the array of values
